面向对象的设计和实现
1.定义和实现对象可以直接对应现实世界里面的事物；
2.面向对象的设计（OOD-Object-Oriented Design)
	1)分析要解决的现实世界的问题
	2)定义出各种对象代表现实世界的对象
	3)通过设计 对象之间的关系和交互行为 来设计系统
3.因为
	1)现实世界其实就是各种对象和对象之间的关系、交互行为
	2)现实世界：事物的世界
	3)物：对象、对象之间的关系(儿子、父亲；老板、员工)
	4)事：对象之间的交互(厨师烧饭，人开汽车)
	5)这种设计方式 更容易被人所理解和接受

类
1.接下来，确定对象的定义
	1)对象的定义：定义对象在这个系统里面的属性和行为
	2)比如老虎这类对象，在这个系统里面共有的属性，我门基本一下子就能想到的有 体重（缺省200斤）、名称（tiger）。而行为呢，有叫唤(roar),有吃食物（eat）
	3)OOD软件设计 把对象和它的属性和行为的定义叫类
	4)类表示了这类对象所共有的属性和行为
	5)类事ODD最基本的概念
	6)类 是 OOD 中 同一类型对象 的书面定义
	7)定义了类，就定义了对象类型(包括在系统里面的属性和行为)

实例
1.实例 是类的具体化存在
	1)老虎这个类，描述了
		在这个系统里面共有的属性：体重（缺省200斤）、名称（tiger）。
		行为 有 叫唤(roar),有吃食物（eat）
	2)每个具体的老虎，是老虎这个类的 实例
		比如游戏中 房间 里面的老虎
	3)类和实例的关系 有些像 模具和根据模具造出来的东西一样

OOD VS OOL
面向对象的语言 vs 面向对象的设计
1.面向对象的设计：是一种设计思路
2.面向对象的语言：提供对面向对象设计的语言支持
3.非面向对象的语言也能实现面向对象的设计思路

Python的类定义
1.Python类的定义
	class ClassName:
		'class documentation string'
		class_suite
2.关键字 class 、类名（通常首字母大写）
	class Tiger：
		classname = 'trger'
3.属性(attribute):classname是一个属性
4.实例化
	t1 = Tiger()
5.实例化后，可以访问其属性
	t1.classname

静态属性和实例属性
1.静态属性（类属性）
	1)老虎的名称（该类的所有实例共享的属性）
2.实例属性
	1)老虎的体重（每个实例独有的属性）
	2)定义在 初始化方法 __init__ 里
	3)self的概念
		class Tiger：
			classname = 'tiger'
			def __init__(self,weight=200)
			print('haha,in __init__')
			self.weight = weight
3.对象的方法是描述对象相关的行为的
	1)通过定义在类里面的函数
	2)初始化方法 __init__ 函数
4.类的方法包括
	1)实例方法：每个具体实例相关的方法
	2)静态方法：共有的方法，与每个具体实例无关
5.实例方法
	1)与每个具体实例相关的方法
		如果代码中的实例方法不访问任何实例属性，一般建议实现为静态方法
	2)初始化方法就是一个实例方法
	3)一般实例方法都要访问self
	4)所以self是第一个参数。
6.静态方法
	1)与每个具体实例无关
	2)@staticmethod 修饰（装饰器）
		class Tiger:
			classname = 'Tiger'

			@staticmethod
			def roar():
				print('wow!!!')

			@staticmethod
			def roar2():
				print(Tiger.classname)

对象的组合
什么是对象的组合
1.现实世界里面的对象
	1）大对象里面有小对象
	2）比如人这个对象可以有头、腿、胳膊、躯干
	3）这就形成了组合关系：
		人 拥有（包含）头、腿、胳膊、躯干
		头、腿、躯干 组合成了人
2.OOD里面对象也是可以互相组合的
	1）房间对象包含老虎、羊
	2）通过 对象的属性 表示这种组合关系的
	3）在类定义的 初始化函数里面表示对象的组合关系
		class Room：
			def __init__(self):
				self.num = 1
				self.animal = Tiger(300)
		# 定义房间Room类，房间由动物、房间号码所组成
	4）用类的属性 指向另一个对象 表示 对象的组合关系
	5）表示：Room 对象 拥有一个 animal 对象
	6）房间对象由 老虎对象和其他对象组成（这里是房间号，一个int对象）
	7）这就是对象的组合

对象的继承
1.现实世界里面的对象
	1）对象是从属大类和小类的关系
		门、纲、目、科、属、种
		人类：脊索动物门——>哺乳纲——>灵长目——>人科——>人属——>智人种
		桌子——>电脑桌
		虎——>华南虎——>白纹华南虎
	2）后面的对象 继承 前面 的对象
	3）拥有前面对象抽象的 一切特征，可以说后面对象是前面的对象
	4）组合是一种 有一个 的关系。A对象有一个B 对象 的关系。
	5）继承是一种 是一个 的关系。A对象是一个B 对象 的关系。
2.python里面的对象的继承
	class SubClassName(ParentClass[,ParentClass2,...]):
	'optional class documentation string'
	class_suite
	1)括号里面的是被继承的类，叫做父类（或者基类），SubClassName是继承类，叫做子类（或者继承类）
	2）父类可以有多个（多重继承），中国学生：中国人、学生，它同时拥有多个父类的所有特性
	3）表示：子类 对象 是一个 父类 对象
	4）注意点：
		子类初始化方法里面，需要调用父类的初始化方法
		class NeTiger(Tiger):
			color = 'yellow white'
			def __init__(self,weight=200)
				Tiger.__init__(self,weight)
3.重定义
	1）子类的属性和行为和父类有些不一样
	2）比如：重新定义东北虎的叫声，和它的名称
	3）子类实例 调用这些属性、方法 会使用新的定义
	4）多态
		同样的方法通用，在不同的类型的对象上表现出不同的 特性，就称之为多态，
		比如：一个类的子类和父类，不同的实例对象调用同样的方法，但表现出来的行为却不一样，这种特点就是多态