进程的概念：运行着的程序

线程的概念：
1.每个进程里面至少包含一个线程
2.线程时操作系统创建的，用来控制代码执行的数据结构
3.线程就像代码的执行许可证
4.单线程程序，主线程的入口就是代码的开头
5.主线程顺序往下执行，直到所有的代码都执行完

概念对应（银行办理业务）：
一个服务窗口 = cpu的一个核
客户 = 进程（运行着的程序）
调度员 = 操作系统（os）
服务号 = 线程

一个服务号，相当于银行要办的一件事情，对应线程，计算机程序要做的一件事情，也就是一段代码要执行

调度员分配服务号给客户 = os分配线程给进程代码
服务窗口给客户办业务 = cpu核心执行线程代码

注意点：
服务窗口，在一个时间点上只能服务一个顾客业务
cpu核心，在一个时间点上只能执行一个线程代码

调度的概念：
1.调度员分配窗口给客户
2.一个客户不一定占用一个窗口一直到它结束
1）比如需要很长时间填写表格
2）这时候可以让下一个客户来办理
3）先前的客户填好了表格，再继续

操作系统不会让一个线程一直占有cpu的

线程库：
1.代码通过系统调用，请求os分配一个新的线程
2.python里面：
1）thread库
2）threading库
3）都可以用来创建和管理线程
4）thread 比较低层
5）threading是thread模块的扩展，提供了很多线程同步功能，使用起来更加方便强大

多线程的概念：
代码通过系统调用，请求os分配一个新的线程，与原来的线程并行的执行一段代码

我们为什么需要多线程：
1.我们的大脑有时候需要同时处理多个事情，
如我们在酒席上可能会一边和朋友聊天，一边思考着各种其他事情
2.多线程给一个程序并行执行代码的能力，同时处理多个任务
3.常见的：ui线程，任务线程 task exeute

多线程使用共享数据：
1.从例子说起，高铁上的厕所，某个时刻只能一个人使用，进入后往往立即锁门（表示
已经被使用），看到的人，门口排队等待，用完开锁（表示已经使用完了），排队
的人中下一个去使用（重复这个过程）
2.有些资源是某个时刻独占使用的，如果不加锁，某人使用厕所，另一个人也进入使用
，发生冲突；锁保证了，只有一个人使用，别人必须等待

加锁：
1.注意锁的代码位置
2.在访问共享对象的代码前，要调用lock对象的acquire方法，进行上锁操作。
当多个线程同时执行lock.acquire()时，只有一个线程能成功地获取锁，
然后继续执行代码，其他线程就继续等待直到获得锁为止。
3.访问结束后，一定要调用lock对象的release方法，进行解锁操作。否则其它等待锁的线程将
永远等待下去，成为死线程。
4.加锁是原子操作，不会有同时加锁的情况

条件变量：
1.生产者、消费者
  1）一个线程负责让用户输入命令，存入一个list中
  2）另一个线程负责从list中取出命令，执行命令
  3）此时，list是共享数据，应该用锁，但用户输入命令的速度，和执行命令的速度，谁快谁慢，还很难说，消费者依赖生产者才能工作
2.负责让用户输入命令的线程：生产者，产生命令存入列表中
3.负责执行命令的线程：消费者，取出列表中的命令
4.条件变量的使用：
  1）线程a (消费者)通过条件变量对象 等待一个条件满足，否则就睡眠式等待
  2）线程b（生产者）在条件满足时，通过条件变量通知 唤醒线程a
  3）线程a（消费者）接到通知，从睡眠中醒来，继续代码的执行




